[comment encoding = UTF-8 /]
[**
 * The documentation of the module utils.
 */]
[module utils('http://www.example.org/multiactivity')]
[import pje20::androidapp::multiactivity::multiactivitymetamodel::gen::java::files::getterTemplate /]


[**
 * The documentation of the template generateElement.
 * @param aType
 */]

				[comment  ########### interfaces implementation section ########### /]

[template public interfacesImplementation(anActivity : Activity)
{ listViews : Sequence(ListView) = self.eAllContents(ListView); }
]
[comment]gèrer les adapters[/comment]
	[if (listViews -> notEmpty())]
		implements View.OnClickListener,
		[listViews-> first().getAdapterInterfaceName()/],
        	
	[for (aListView : ListView | listViews)]
	//	[self.getNoticeDialiogListenerClassName()/],
	[/for]
		RecyclerItemTouchHelper.RecyclerItemTouchHelperListener   
	[else]
		implements View.OnClickListener
	[/if]
[/template]


				[comment  ########### Imports section ########### /]


[**
 * generate imports for activity that contains a PopupTime
 * @param anActivity the activity 
 */]

[template public generateElementsImports (anActivity : Activity) ? (self.eAllContents(PopupTimeButton) -> notEmpty())]
import android.widget.TextView;
import android.os.Build;
import androidx.annotation.RequiresApi;
import java.time.LocalDateTime; 
import java.time.format.DateTimeFormatter; 
[/template]

[**
 * generate imports for activity that contains a ListView
 * @param anActivity the activity 
 */]
[template public generateElementsImports (anActivity : Activity) ? (self.eAllContents(ListView) -> notEmpty())]
import androidx.lifecycle.LiveData;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.app.Dialog;
import java.util.List;
[for (aListView : ListView | self.eAllContents(ListView))]
import [aListView.getModelPackageName()/].[aListView.getModelName()/];
import [aListView.getModelPackageName()/].[aListView.getViewModelName()/];

[if (self.displayDetail)]
import [self.getActivityDetailPackageName()/].[self.getActivityDetailName()/];
[/if]
[/for]
[let allowedCreationValues : Sequence(ListView) = anActivity.getListViewAllowedCreation()]
[if (allowedCreationValues -> notEmpty())]
import android.widget.EditText;
import android.widget.ImageView;
[/if]
[/let]

[if (anActivity.eAllContents(PopupMessageButton)->isEmpty())]
//import pje20.androidapp.app1.popup.HelloWorldDialogFragment;
[/if]
[/template]
[**
 * generate imports for activity with some specification
 * @param anActivity the activity 
 */]
[template public generateElementsImports (anActivity : Activity) ? (anActivity.eAllContents(PopupMessageButton)->notEmpty())]
import pje20.androidapp.app1.popup.HelloWorldDialogFragment;
[/template]

[**
 * generate common imports for activity 
 * @param anActivity the activity 
 */]

[template public generateCommonImports (anActivity : Activity) ]	
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import androidx.appcompat.app.AppCompatActivity;
import pje20.androidapp.app1.R;
[/template]


				[comment  ########### Attributes definition section ########### /]


[template public declareAttribute(anActivity : Activity) ? (self.eAllContents(PopupMessageButton) -> notEmpty())]
[for (aPopupMessage : PopupMessageButton | self.eAllContents(PopupMessageButton))]
		HelloWorldDialogFragment mDialog[self.id_view.toUpperFirst()/];
[/for]	
[/template]
[template public declareAttribute(anActivity : Activity) ? (self.eAllContents(ListView) -> notEmpty())]
public static String ITEM_POSITION = "POSITION";
[for (aListView : ListView | self.eAllContents(ListView))]
	RecyclerView m[aListView.getRecyclerViewName()/];
	RecyclerView.Adapter m[aListView.getAdapterName()/];	
	RecyclerView.LayoutManager m[aListView.getLayoutManagerName()/];
	[aListView.getViewModelName()/] m[aListView.getViewModelName()/];
[/for]
[/template]



[template public defineAttribute(anActivity : Activity) ? (self.eAllContents(PopupMessageButton) -> notEmpty())]
	[for (aPopupMessage : PopupMessageButton | self.eAllContents(PopupMessageButton))]
		mDialog[self.id_view.toUpperFirst()/] = new HelloWorldDialogFragment("[self.message/]");
	[/for]

[/template]

[template public defineAttribute(anActivity : Activity) ? (self.eAllContents(ListView) -> notEmpty()) ]   

[for (aListView : ListView | self.eAllContents(ListView))]
[let aModelName : String = self.listdeclaration.entity.name.toUpperFirst()]
	m[aListView.getRecyclerViewName()/] =findViewById(R.id.[aListView.name/]_[aListView.id_view/]) ;
	m[aListView.getViewModelName()/] = new ViewModelProvider(this).get([aModelName/]ViewModel.class);
	LiveData<List<[aModelName/]>> m[aModelName/]Data = m[aModelName/]ViewModel.getSampleData();
	m[aListView.getAdapterName()/] = new [aListView.getAdapterName()/](m[aModelName/]Data,this);	
	m[aListView.getLayoutManagerName()/] = new LinearLayoutManager(this);
	m[aListView.getRecyclerViewName()/].setLayoutManager(m[aListView.getLayoutManagerName()/]);
	m[aListView.getRecyclerViewName()/].setAdapter(m[aListView.getAdapterName()/]);
	final androidx.lifecycle.Observer<List<[aModelName/]>> [aModelName/]Observer = new androidx.lifecycle.Observer<List<[aModelName/]>>() {
            @Override
            public void onChanged(List<[aModelName/]> [aModelName.toLower()/]) {
                m[aModelName/]Adapter.notifyDataSetChanged();
            };
        };
       m[aListView.getViewModelName()/].get[aModelName/]LiveData().observe(this,[aModelName/]Observer);
[/let]
[if (self.allowDeletion)]
		RecyclerItemTouchHelper RecyclerItemTouchHelpers = new RecyclerItemTouchHelper(0, ItemTouchHelper.LEFT|ItemTouchHelper.RIGHT,this);
    	ItemTouchHelper itemTouchHelper = new ItemTouchHelper(RecyclerItemTouchHelpers);
    	itemTouchHelper.attachToRecyclerView(m[self.getRecyclerViewName()/]);
[/if]
[/for]
[comment]	si l'une des listview permet la création d'un élément	[/comment]
[if (self.eAllContents(ListView)-> first().allowedCreation)]
    ImageView AddButton = findViewById(R.id.add_todo);
	AddButton.setOnClickListener(this);
	//AddTodoDialogFragments = new AddTodoDialogFragment();
[/if]

[/template]


[comment  ########### Listener definition section ########### /]



[template public setViewClickListener(aView : View) ? ((self.oclIsTypeOf(TextView)=false) and (self.oclIsTypeOf(ListView)=false))]
	findViewById(R.id.[self.getViewId()/]).setOnClickListener(this);
[/template]

[template public displayDetail(aView : View) ]

[/template]

[template public displayDetail(aListView : ListView) { aModelName : String = self.getModelName() ;}]
@Override	
public void display[aModelName/]Detail(View View, [aModelName/] m[aModelName/]){
	Intent intent  = new Intent(this,[self.getActivityDetailName()/].class);
	intent.putExtra(ITEM_POSITION,m[aModelName/]);
	startActivity(intent);

}
[/template]

[template public removeItem(aView : View) ]

[/template]

[template public removeItem(aListView : ListView)]
@Override
public void onSwiped(RecyclerView.ViewHolder viewHolder) {
	int position = viewHolder.getAdapterPosition();
    m[aListView.getViewModelName()/].remove[aListView.getModelName()/](position);
	}
	
[/template]

[comment gerer les boutons add /]

[template public viewCase(aView : ListView)]
	case R.id.add_todo : {
			break;
		}
[/template]

[template public viewCase(aView : TextView)]
	
[/template]

[template public viewCase(aView : View) ]
	case R.id.[self.getViewId()/]: {
                [self.handleClick()/]
                break;
            } 
[/template]




[template public handleClick(aView : View)]
		
	//!!! n'oublier d'implementer pour ce sous type si necessaire
[/template]

[template public handleClick(buttonActivity : NewActivityButton)]
		Intent intent = new Intent(this, [self.activity.name.toUpperFirst()/].class);
	    startActivity(intent);		
[/template]

[template public handleClick(buttonPopUp : PopupMessageButton)]	
        mDialog[self.id_view.toUpperFirst()/].show(getSupportFragmentManager(),"[self.message/]");	
[/template]

[template public handleClick(aTimeButton : PopupTimeButton)]
	@RequiresApi(api = Build.VERSION_CODES.O)
	public void display[self.id_view.toUpperFirst()/](View view){
		 LocalDateTime myDateObj = LocalDateTime.now();
		 DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
    	 String formattedDate = myDateObj.format(myFormatObj);
		 TextView txt = findViewById(R.id.textview_[self.getViewId()/]);
		 txt.setText(formattedDate);
			
    }
	
[/template]


